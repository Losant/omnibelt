const intersectAny = require('./intersect-any');
const foo = 'foo';
const bar = 'bar';
const baz = 'baz';
const qux = 'qux';
const quux = 'quux';
const corge = 'corge';
it('handles strings', () => {
    const x = [foo, bar, baz];
    const y = [corge];
    const z = [qux, baz];
    expect(intersectAny([x, y, z])).toEqual([baz]);
});
it('handles numbers', () => {
    const x = [1, 2, 3];
    const y = [5];
    const z = [1, 4];
    expect(intersectAny([x, y, z])).toEqual([1]);
});
it.skip('handles strings that look like numbers', () => {
    const x = ['1', '2', '3'];
    const y = ['5'];
    const z = ['1', '4'];
    expect(intersectAny([x, y, z])).toEqual(['1']);
});
it('handles value in all arrays', () => {
    const v = [foo, bar];
    const w = [foo, baz];
    const x = [foo, qux];
    const y = [foo, quux];
    const z = [foo, corge];
    expect(intersectAny([v, w, x, y, z])).toEqual([foo]);
});
it('handles multiple intersecting values', () => {
    const x = [1, 2, 3];
    const y = [5, 4];
    const z = [1, 4];
    expect(intersectAny([x, y, z])).toEqual([1, 4]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0LWFueS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL29tbmliZWx0L2ludGVyc2VjdC1hbnkudGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVoRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDbEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2xCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNsQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDbEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQ3BCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUV0QixFQUFFLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQ3pCLE1BQU0sQ0FBQyxHQUFHLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUM1QixNQUFNLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBRSxDQUFDO0lBQ3BCLE1BQU0sQ0FBQyxHQUFHLENBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO0lBQ3ZCLE1BQU0sQ0FDSixZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3hCLENBQUMsT0FBTyxDQUFDLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFFLENBQUM7SUFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7SUFDbkIsTUFBTSxDQUNKLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDeEIsQ0FBQyxPQUFPLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7SUFDckQsTUFBTSxDQUFDLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUM7SUFDbEIsTUFBTSxDQUFDLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDdkIsTUFBTSxDQUNKLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDeEIsQ0FBQyxPQUFPLENBQUMsQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxNQUFNLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUN2QixNQUFNLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUN2QixNQUFNLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUN2QixNQUFNLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxJQUFJLENBQUUsQ0FBQztJQUN4QixNQUFNLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxLQUFLLENBQUUsQ0FBQztJQUN6QixNQUFNLENBQ0osWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQzlCLENBQUMsT0FBTyxDQUFDLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsTUFBTSxDQUFDLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0lBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO0lBQ25CLE1BQU0sQ0FDSixZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3hCLENBQUMsT0FBTyxDQUFDLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUMifQ==